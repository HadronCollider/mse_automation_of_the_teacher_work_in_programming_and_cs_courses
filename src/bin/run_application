import argparse
import os
import logging

file_needs_for_app = ['stepic_client.json', 'private key for GoogleAPI.json', 'config.json']

LOG_FORMAT = "%(asctime)s - %(levelname)s - %(funcName)s - %(message)s"
DEFAULT_LOG_LEVEL = "ERROR"
LEVELS = {'debug': logging.DEBUG,
          'info': logging.INFO,
          'warning': logging.WARNING,
          'error': logging.ERROR,
          'critical': logging.CRITICAL
          }


def correct_path(path: str):
    """
    Verifies that the required files exist in the directory
    :param path:
    :return:
    """
    if os.path.isdir(path) and all([os.path.isfile(os.path.join(path, file)) for file in file_needs_for_app]):
        return path
    else:
        files = [i for i in file_needs_for_app]
        raise argparse.ArgumentTypeError(
            "Error: run_applications: the path "+path+" must specify the directory with \n "+str(files))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Run application for automation of work for stepic.',
        epilog='')

    parser.add_argument(
        'directory',
        type=correct_path,
    )
    parser.add_argument(
        '-p',
        '--port',
        type=int,
        default=5000,
    )

    parser.add_argument(
        '-a',
        '--host',
        type=str,
        default='127.0.0.1'
    )
    parser.add_argument(
        '-l',
        '--log_level',
        dest='log_level',
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
        default='INFO',
        help='Sets the log level to DEBUG, INFO, WARNING, ERROR, and CRITICAL')
    parser.add_argument(
        '-f',
        '--log_file',
        dest='log_file',
    )
    parser.add_argument(
        '-pd',
        '--port_db',
        type=int,
        default=27017,
    )
    parser.add_argument(
        '-ad',
        '--host_db',
        type=str,
        default='127.0.0.1'
    )

    args = parser.parse_args()
    dir = args.directory
    if args.log_file:
        logging.basicConfig(filename=args.log_file, level=args.log_level, filemode='w', format=LOG_FORMAT)
    else:
        logging.basicConfig(level=args.log_level, format=LOG_FORMAT)

    from mongoengine import connect

    logging.info('Check connection to database (host='+str(args.host_db)+' port='+str(args.port_db)+')')
    db=connect('stepic', host=args.host_db, port=args.port_db)
    try:
        db.server_info()
    except Exception as e:
        logging.error("Database doesn't available")
        raise ValueError('Connection Error: database not available')

    from automation_of_work_for_stepic.stepic_api import StepicAPI
    from automation_of_work_for_stepic.configuration import Configuration
    from automation_of_work_for_stepic.google_table import GoogleTable

    StepicAPI(os.path.join(dir, file_needs_for_app[0]))
    Configuration(os.path.join(dir, file_needs_for_app[2]))
    GoogleTable(os.path.join(dir, file_needs_for_app[1]))

    from automation_of_work_for_stepic.app import create_app

    create_app().run(host=args.host, port=args.port)
